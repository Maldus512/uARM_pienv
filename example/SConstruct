import os
import sys
import multiprocessing


# Ripped from whichcraft python library
def which(cmd, mode=os.F_OK | os.X_OK, path=None):
    def _access_check(fn, mode):
        return os.path.exists(fn) and os.access(fn,
                                                mode) and not os.path.isdir(fn)

    if os.path.dirname(cmd):
        if _access_check(cmd, mode):
            return cmd
        return None
    if path is None:
        path = os.environ.get("PATH", os.defpath)
    if not path:
        return None
    path = path.split(os.pathsep)
    if sys.platform == "win32":
        if os.curdir not in path:
            path.insert(0, os.curdir)
        pathext = os.environ.get("PATHEXT", "").split(os.pathsep)
        if any(cmd.lower().endswith(ext.lower()) for ext in pathext):
            files = [cmd]
        else:
            files = [cmd + ext for ext in pathext]
    else:
        files = [cmd]
    seen = set()
    for dir in path:
        normdir = os.path.normcase(dir)
        if normdir not in seen:
            seen.add(normdir)
            for thefile in files:
                name = os.path.join(dir, thefile)
                if _access_check(name, mode):
                    return name
    return None


POSSIBLE_TOOLCHAINS = ["aarch64-elf-", "aarch64-linux-gnu-"]
ELF = 'app.elf'
TOOLCHAIN = None
BUILD = "build"
FLAGS = ['-Wall', '-ffreestanding', '-nostdlib', '-nostartfiles', '-O0', '-g', '-march=armv8-a', '-mtune=cortex-a53'],

VariantDir(BUILD, "source", duplicate=0)

Help(
    """
Type: 'scons' to build the application .elf,
""",
    append=False)

num_cpu = multiprocessing.cpu_count()
SetOption('num_jobs', num_cpu)
print("Running with -j {}".format(GetOption('num_jobs')))

for toolchain in POSSIBLE_TOOLCHAINS:
    if which(toolchain + "gcc") is not None:
        TOOLCHAIN = toolchain
        break

alt_toolchain = None
Import('*')
if alt_toolchain != None:
    TOOLCHAIN=alt_toolchain

if TOOLCHAIN == None:
    print("")
    print("Cross compiler toolchain not found: possible alternatives are:")
    for toolchain in POSSIBLE_TOOLCHAINS:
        print("\t{}gcc".format(toolchain))
    Exit(1)

env_options = {
    "CC":
    "{}gcc".format(TOOLCHAIN),
    "ENV": {
        'PATH': os.environ['PATH'],
    },
    "CPPPATH": ['include', '../include/app'],
    "CCFLAGS":
    FLAGS,
    'LINK' : "{}ld".format(TOOLCHAIN),
    "LINKFLAGS": ["-r"],
    #"LINKFLAGS": ["-Wl,-r", "-nostdlib", "-nostartfiles"],
}

sources = Glob("{}/*.c".format(BUILD))

env = Environment(**env_options)

env.Program(ELF, sources)

if not os.path.exists(BUILD):
    print("Creating build folder...")
    Mkdir(BUILD)
